//ROTATING LINKED LIST FROM RIGHT SIDE


//INPUT= [1,2,3,4,5] K=2;
OUTPUT= [4,5,1,2,3];
//LOGIC


1. [1,200],[2,300],[3,400],[4,500],[5,NULL];
2. COUNT KARENGE TOTAL LINKED LIST
3. BREAK KARENGE JAHA SE ROTATE KERNA HAI;
4. POINTERS EXCHANGE KARENGE  AND DONE


//LEETCODE STYLE





class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) return head;
        int count=0;
        ListNode curr=head;
        while(curr!=null){
            count++;
            curr=curr.next;
        }
        k = k % count;
        if (k == 0) return head;---------- FOR NULLM POINTER EXCEPTION
        count-=k;
        ListNode temp=head;
        ListNode prev=null;
        while(count-->0){
            prev=temp;
            temp=temp.next;
        }
        prev.next=null;
        ListNode tail=temp;
        while(tail.next!=null){
            tail=tail.next;
        }
        tail.next=head;
        return temp;

        
        
    }
}
